{"version":3,"file":"packages-source-src-stories-use-data-source-stories.68528e25.iframe.bundle.js","mappings":"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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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AAC,CAAC,CAAC,mBAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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O,CAAC,kCAAW;;AAEjC;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,8BAA8B;AACzC,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACpBA,eAAe,mBAAO,CAAC,oCAAa;AACpC,oBAAoB,mBAAO,CAAC,yCAAkB;AAC9C,wBAAwB,mBAAO,CAAC,6CAAsB;AACtD,eAAe,mBAAO,CAAC,oCAAa;AACpC,gBAAgB,mBAAO,CAAC,qCAAc;AACtC,iBAAiB,mBAAO,CAAC,sCAAe;;AAExC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvEA,eAAe,mBAAO,CAAC,mCAAY;;AAEnC;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxCA,uBAAuB,mBAAO,CAAC,4CAAqB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC3CA,UAAU,mBAAO,CAAC,+BAAQ;AAC1B,WAAW,mBAAO,CAAC,+BAAQ;AAC3B,iBAAiB,mBAAO,CAAC,sCAAe;;AAExC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;AClBA,aAAa,mBAAO,CAAC,kCAAW;AAChC,kBAAkB,mBAAO,CAAC,sCAAe;AACzC,cAAc,mBAAO,CAAC,kCAAW;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtBA,kBAAkB,mBAAO,CAAC,uCAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChBA,kBAAkB,mBAAO,CAAC,uCAAgB;AAC1C,cAAc,mBAAO,CAAC,kCAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,sCAAsC;AACjD;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA,OAAO,6BAA6B;AACpC,OAAO,6BAA6B;AACpC,OAAO,6BAA6B;AACpC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9CA,eAAe,mBAAO,CAAC,oCAAa;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA,MAAwG;AACxG,MAA8F;AAC9F,MAAqG;AACrG,MAAwH;AACxH,MAAiH;AACjH,MAAiH;AACjH,MAAkP;AAClP;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,mNAAO;;;;AAI4L;AACpN,OAAO,iEAAe,mNAAO,IAAI,iOAAc,GAAG,iOAAc,YAAY,EAAC","sources":["webpack://root/./packages/source/src/use-movable-columns.ts","webpack://root/./packages/source/src/use-column-sort.ts","webpack://root/./packages/source/src/use-collapsing-groups.ts","webpack://root/./packages/source/src/use-undo-redo.ts","webpack://root/./packages/source/src/stories/utils.tsx","webpack://root/","webpack://root/./packages/source/src/stories/use-data-source.stories.tsx","webpack://root/./node_modules/lodash/_arrayIncludes.js","webpack://root/./node_modules/lodash/_arrayIncludesWith.js","webpack://root/./node_modules/lodash/_baseFindIndex.js","webpack://root/./node_modules/lodash/_baseFlatten.js","webpack://root/./node_modules/lodash/_baseIndexOf.js","webpack://root/./node_modules/lodash/_baseIsNaN.js","webpack://root/./node_modules/lodash/_baseMap.js","webpack://root/./node_modules/lodash/_baseOrderBy.js","webpack://root/./node_modules/lodash/_baseSortBy.js","webpack://root/./node_modules/lodash/_baseUniq.js","webpack://root/./node_modules/lodash/_compareAscending.js","webpack://root/./node_modules/lodash/_compareMultiple.js","webpack://root/./node_modules/lodash/_createSet.js","webpack://root/./node_modules/lodash/_isFlattenable.js","webpack://root/./node_modules/lodash/_strictIndexOf.js","webpack://root/./node_modules/lodash/flatten.js","webpack://root/./node_modules/lodash/noop.js","webpack://root/./node_modules/lodash/orderBy.js","webpack://root/./node_modules/lodash/uniq.js","webpack://root/./packages/source/src/stories/use-data-source.stories.tsx?7d95"],"sourcesContent":["import * as React from \"react\";\nimport type { DataEditorProps, GridColumn } from \"@glideapps/glide-data-grid\";\nimport orderBy from \"lodash/orderBy.js\";\n\nfunction colToKey(c: GridColumn) {\n    return c.id ?? `${c.group ?? \"\"}/${c.title}`;\n}\n\nfunction looseCompareCol(a: GridColumn, b: GridColumn | string): boolean {\n    if (typeof b === \"string\") {\n        return colToKey(a) === b;\n    }\n    return colToKey(a) === colToKey(b);\n}\n\nfunction getSortIndexByKey(needle: GridColumn, current: readonly GridColumn[], keys: readonly string[]) {\n    const index = current.indexOf(needle);\n    if (index === -1) return Number.MAX_SAFE_INTEGER; // should never happen\n\n    // if we can directly remap we will\n    const remapped = keys.findIndex(key => looseCompareCol(needle, key));\n    if (remapped !== -1) return remapped;\n\n    // look for its nearlest lefthand neighbor we can remap, and give a partial index\n    for (let n = index; n >= 0; n--) {\n        const ind = keys.findIndex(key => looseCompareCol(current[n], key));\n        if (ind !== -1) return ind + 0.5;\n    }\n\n    return -1;\n}\n\ntype Props = Pick<DataEditorProps, \"columns\" | \"onColumnMoved\" | \"getCellContent\">;\n\n// this cannot actually be made transparent to the user. Doing so would break things like\n// selection rnages being rectangular. The mangled columns need to actually be returned to the\n// user so they can be referenced and understood correctly in other callbacks they may provide\n\n// Darn\nexport function useMoveableColumns(p: Props): Required<Props> {\n    const { columns: columnsIn, getCellContent: getCellContentIn, onColumnMoved: onColumnMovedIn } = p;\n\n    const [keys, setKeys] = React.useState(() => columnsIn.map(colToKey));\n\n    const columns = React.useMemo(() => {\n        return orderBy(columnsIn, c => getSortIndexByKey(c, columnsIn, keys));\n    }, [keys, columnsIn]);\n\n    const onColumnMovedRef = React.useRef(onColumnMovedIn);\n    onColumnMovedRef.current = onColumnMovedIn;\n    const onColumnMoved = React.useCallback((startIndex: number, endIndex: number) => {\n        setKeys(old => {\n            const newCols = [...old];\n            const [toMove] = newCols.splice(startIndex, 1);\n            newCols.splice(endIndex, 0, toMove);\n            return newCols;\n        });\n        onColumnMovedRef.current?.(startIndex, endIndex);\n    }, []);\n\n    React.useEffect(() => {\n        setKeys(cv => {\n            return orderBy(columnsIn, x => getSortIndexByKey(x, columnsIn, cv)).map(colToKey);\n        });\n    }, [columnsIn]);\n\n    const getCellContent = React.useCallback<typeof getCellContentIn>(\n        cell => {\n            const [col, row] = cell;\n            const needle = columns[col];\n            const index = columnsIn.indexOf(needle);\n            return getCellContentIn([index, row]);\n        },\n        [columns, columnsIn, getCellContentIn]\n    );\n\n    return {\n        columns,\n        onColumnMoved,\n        getCellContent,\n    };\n}\n","import { type DataEditorProps, type GridCell, GridCellKind, type GridColumn } from \"@glideapps/glide-data-grid\";\nimport range from \"lodash/range.js\";\nimport * as React from \"react\";\n\nfunction cellToSortData(c: GridCell): string {\n    switch (c.kind) {\n        case GridCellKind.Number:\n            return c.data?.toString() ?? \"\";\n        case GridCellKind.Boolean:\n            return c.data?.toString() ?? \"\";\n        case GridCellKind.Markdown:\n        case GridCellKind.RowID:\n        case GridCellKind.Text:\n        case GridCellKind.Uri:\n            return c.data ?? \"\";\n        case GridCellKind.Bubble:\n        case GridCellKind.Image:\n            return c.data.join(\"\");\n        case GridCellKind.Drilldown:\n            return c.data.map(x => x.text).join(\"\");\n        case GridCellKind.Protected:\n        case GridCellKind.Loading:\n            return \"\";\n        case GridCellKind.Custom:\n            return c.copyData;\n    }\n}\n\nfunction tryParse(val: string | number): number | string {\n    if (typeof val === \"number\") return val;\n    if (val.length > 0) {\n        const x = Number(val);\n        if (!isNaN(x)) {\n            val = x;\n        }\n    }\n    return val;\n}\n\nexport function compareSmart(a: string | number, b: string | number): number {\n    a = tryParse(a);\n    b = tryParse(b);\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.localeCompare(b);\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        if (a === b) return 0;\n        return a > b ? 1 : -1;\n    } else if (a == b) {\n        return 0;\n    }\n    return a > b ? 1 : -1;\n}\n\nexport function compareRaw(a: string | number, b: string | number) {\n    if (a > b) return 1;\n    if (a === b) return 0;\n    return -1;\n}\n\ntype Props = Pick<DataEditorProps, \"getCellContent\" | \"rows\" | \"columns\"> & {\n    sort?: {\n        column: GridColumn;\n        mode?: \"default\" | \"raw\" | \"smart\";\n        direction?: \"asc\" | \"desc\";\n    };\n};\ntype Result = Pick<DataEditorProps, \"getCellContent\"> & {\n    getOriginalIndex: (index: number) => number;\n};\n\nexport function useColumnSort(p: Props): Result {\n    const { sort, rows, getCellContent: getCellContentIn } = p;\n\n    let sortCol =\n        sort === undefined\n            ? undefined\n            : p.columns.findIndex(c => sort.column === c || (c.id !== undefined && sort.column.id === c.id));\n    if (sortCol === -1) sortCol = undefined;\n\n    // This scales to about 100k rows. Beyond that things take a pretty noticeable amount of time\n    // The performance \"issue\" from here on out seems to be the lookup to get the value. Not sure\n    // what to do there. We need the indirection to produce the final sort map. Perhaps someone\n    // more clever than me will wander in and save most of that time.\n    const dir = sort?.direction ?? \"asc\";\n    const sortMap = React.useMemo(() => {\n        if (sortCol === undefined) return undefined;\n        const vals: string[] = new Array(rows);\n\n        const index: [number, number] = [sortCol, 0];\n        for (let i = 0; i < rows; i++) {\n            index[1] = i;\n            vals[i] = cellToSortData(getCellContentIn(index));\n        }\n\n        let result: number[];\n        if (sort?.mode === \"raw\") {\n            result = range(rows).sort((a, b) => compareRaw(vals[a], vals[b]));\n        } else if (sort?.mode === \"smart\") {\n            result = range(rows).sort((a, b) => compareSmart(vals[a], vals[b]));\n        } else {\n            result = range(rows).sort((a, b) => vals[a].localeCompare(vals[b]));\n        }\n        if (dir === \"desc\") {\n            result.reverse();\n        }\n        return result;\n    }, [getCellContentIn, rows, sort?.mode, dir, sortCol]);\n\n    const getOriginalIndex = React.useCallback(\n        (index: number): number => {\n            if (sortMap === undefined) return index;\n            return sortMap[index];\n        },\n        [sortMap]\n    );\n\n    const getCellContent = React.useCallback<typeof getCellContentIn>(\n        ([col, row]) => {\n            if (sortMap === undefined) return getCellContentIn([col, row]);\n            row = sortMap[row];\n            return getCellContentIn([col, row]);\n        },\n        [getCellContentIn, sortMap]\n    );\n\n    if (sortMap === undefined) {\n        return { getCellContent: p.getCellContent, getOriginalIndex };\n    }\n\n    return {\n        getOriginalIndex,\n        getCellContent,\n    };\n}\n","import type { GridSelection, DataEditorProps, Theme } from \"@glideapps/glide-data-grid\";\nimport React from \"react\";\n\ntype Props = Pick<\n    DataEditorProps,\n    \"columns\" | \"onGroupHeaderClicked\" | \"onGridSelectionChange\" | \"getGroupDetails\" | \"gridSelection\" | \"freezeColumns\"\n> & { theme: Theme };\n\ntype Result = Pick<\n    DataEditorProps,\n    \"columns\" | \"onGroupHeaderClicked\" | \"onGridSelectionChange\" | \"getGroupDetails\" | \"gridSelection\"\n>;\n\nexport function useCollapsingGroups(props: Props): Result {\n    const [collapsed, setCollapsed] = React.useState<readonly string[]>([]);\n    const [gridSelectionInner, setGridSelectionsInner] = React.useState<GridSelection | undefined>(undefined);\n\n    const {\n        columns: columnsIn,\n        onGroupHeaderClicked: onGroupHeaderClickedIn,\n        onGridSelectionChange: onGridSelectionChangeIn,\n        getGroupDetails: getGroupDetailsIn,\n        gridSelection: gridSelectionIn,\n        freezeColumns = 0,\n        theme,\n    } = props;\n\n    const gridSelection = gridSelectionIn ?? gridSelectionInner;\n\n    const spans = React.useMemo(() => {\n        const result: [number, number][] = [];\n        let current: [number, number] = [-1, -1];\n        let lastGroup: string | undefined;\n        for (let i = freezeColumns; i < columnsIn.length; i++) {\n            const c = columnsIn[i];\n            const group = c.group ?? \"\";\n            const isCollapsed = collapsed.includes(group);\n\n            if (lastGroup !== group && current[0] !== -1) {\n                result.push(current);\n                current = [-1, -1];\n            }\n\n            if (isCollapsed && current[0] !== -1) {\n                current[1] += 1;\n            } else if (isCollapsed) {\n                current = [i, 1];\n            } else if (current[0] !== -1) {\n                result.push(current);\n                current = [-1, -1];\n            }\n            lastGroup = group;\n        }\n        if (current[0] !== -1) result.push(current);\n        return result;\n    }, [collapsed, columnsIn, freezeColumns]);\n\n    const columns = React.useMemo(() => {\n        if (spans.length === 0) return columnsIn;\n        return columnsIn.map((c, index) => {\n            for (const [start, length] of spans) {\n                if (index >= start && index < start + length) {\n                    let width = 8;\n                    if (index === start + length - 1) {\n                        width = 36;\n                    }\n\n                    return {\n                        ...c,\n                        width,\n                        themeOverride: { bgCell: theme.bgCellMedium },\n                    };\n                }\n            }\n            return c;\n        });\n    }, [columnsIn, spans, theme.bgCellMedium]);\n\n    const onGroupHeaderClicked = React.useCallback<NonNullable<Props[\"onGroupHeaderClicked\"]>>(\n        (index, a) => {\n            onGroupHeaderClickedIn?.(index, a);\n\n            const group = columns[index]?.group ?? \"\";\n            if (group === \"\") return;\n            a.preventDefault();\n            setCollapsed(cv => (cv.includes(group) ? cv.filter(x => x !== group) : [...cv, group]));\n        },\n        [columns, onGroupHeaderClickedIn]\n    );\n\n    const onGridSelectionChange = React.useCallback<NonNullable<Props[\"onGridSelectionChange\"]>>(\n        s => {\n            if (s.current !== undefined) {\n                const col = s.current.cell[0];\n                const column = columns[col];\n                setCollapsed(cv => {\n                    if (cv.includes(column?.group ?? \"\")) {\n                        return cv.filter(g => g !== column.group);\n                    }\n                    return cv;\n                });\n            }\n            if (onGridSelectionChangeIn !== undefined) {\n                onGridSelectionChangeIn(s);\n            } else {\n                setGridSelectionsInner(s);\n            }\n        },\n        [columns, onGridSelectionChangeIn]\n    );\n\n    const getGroupDetails = React.useCallback<NonNullable<Props[\"getGroupDetails\"]>>(\n        group => {\n            const result = getGroupDetailsIn?.(group);\n\n            return {\n                ...result,\n                name: group,\n                overrideTheme: collapsed.includes(group ?? \"\")\n                    ? {\n                          bgHeader: theme.bgHeaderHasFocus,\n                      }\n                    : undefined,\n            };\n        },\n        [collapsed, getGroupDetailsIn, theme.bgHeaderHasFocus]\n    );\n\n    return {\n        columns,\n        onGroupHeaderClicked,\n        onGridSelectionChange,\n        getGroupDetails,\n        gridSelection,\n    };\n}\n","import type { EditableGridCell, GridCell, GridSelection, Item, DataEditorRef } from \"@glideapps/glide-data-grid\";\n\nimport { useCallback, useEffect, useMemo, useReducer, useRef, useState } from \"react\";\n\ninterface Edit {\n    cell: Item;\n    newValue: EditableGridCell;\n}\n\ninterface Batch {\n    edits: Edit[];\n    selection: GridSelection;\n}\n\ninterface ReducerState {\n    undoHistory: Batch[];\n    redoHistory: Batch[];\n    canUndo: boolean;\n    canRedo: boolean;\n    isApplyingUndo: boolean;\n    isApplyingRedo: boolean;\n\n    operation?: Batch;\n}\n\nconst initialState: ReducerState = {\n    undoHistory: [],\n    redoHistory: [],\n    canUndo: false,\n    canRedo: false,\n    isApplyingUndo: false,\n    isApplyingRedo: false,\n};\n\ntype Action = UndoRedoAction | EditAction;\n\ninterface UndoRedoAction {\n    type: \"undo\" | \"redo\" | \"operationApplied\";\n}\n\ninterface EditAction {\n    type: \"edit\";\n    batch: Batch;\n}\n\nfunction reducer(state: ReducerState, action: Action) {\n    const newState = { ...state };\n\n    switch (action.type) {\n        case \"undo\":\n            if (state.canUndo) {\n                newState.undoHistory = [...state.undoHistory];\n                const operation = newState.undoHistory.pop();\n                newState.operation = operation;\n                newState.canUndo = newState.undoHistory.length > 0;\n                newState.isApplyingUndo = true;\n\n                return newState;\n            }\n            return state;\n\n        case \"redo\":\n            if (state.canRedo) {\n                newState.redoHistory = [...state.redoHistory];\n                const operation = newState.redoHistory.pop();\n                newState.operation = operation;\n                newState.canRedo = newState.redoHistory.length > 0;\n                newState.isApplyingRedo = true;\n\n                return newState;\n            }\n            return state;\n\n        case \"operationApplied\":\n            newState.operation = undefined;\n            newState.isApplyingRedo = false;\n            newState.isApplyingUndo = false;\n\n            return newState;\n\n        case \"edit\":\n            if (!state.isApplyingRedo && !state.isApplyingUndo) {\n                // general case\n                newState.undoHistory = [...state.undoHistory, action.batch];\n                newState.redoHistory = [];\n                newState.canUndo = true;\n                newState.canRedo = false;\n            }\n\n            if (state.isApplyingUndo) {\n                newState.redoHistory = [...state.redoHistory, action.batch];\n                newState.canRedo = true;\n            }\n\n            if (state.isApplyingRedo) {\n                newState.undoHistory = [...state.undoHistory, action.batch];\n                newState.canUndo = true;\n            }\n\n            return newState;\n\n        default:\n            throw new Error(\"Invalid action\");\n    }\n}\n\nexport function useUndoRedo(\n    gridRef: React.RefObject<DataEditorRef>,\n    getCellContent: (cell: Item) => GridCell,\n    onCellEdited: (cell: Item, newValue: EditableGridCell) => void,\n    onGridSelectionChange?: (newVal: GridSelection) => void\n) {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const currentBatch = useRef<Batch | null>(null);\n    const timeout = useRef<any>(null);\n\n    const isApplyingUndoRef = useRef(false);\n    const isApplyingRedoRef = useRef(false);\n    useEffect(() => {\n        isApplyingUndoRef.current = state.isApplyingUndo;\n        isApplyingRedoRef.current = state.isApplyingRedo;\n    }, [state.isApplyingUndo, state.isApplyingRedo]);\n\n    const [gridSelection, setGridSelection] = useState<GridSelection | null>(null);\n    const gridSelectionRef = useRef<GridSelection | null>(null);\n    const onGridSelectionChangedEdited = useCallback(\n        (newVal: GridSelection) => {\n            if (onGridSelectionChange) {\n                onGridSelectionChange(newVal);\n            }\n            setGridSelection(newVal);\n            gridSelectionRef.current = newVal;\n        },\n        [onGridSelectionChange]\n    );\n\n    const wrappedOnCellEdited = useCallback(\n        (cell: Item, newValue: EditableGridCell) => {\n            const isApplyingUpdate = isApplyingUndoRef.current || isApplyingRedoRef.current;\n\n            if (!isApplyingUpdate && gridSelectionRef.current) {\n                clearTimeout(timeout.current);\n                const previousValue = getCellContent(cell) as EditableGridCell;\n\n                if (currentBatch.current === null) {\n                    currentBatch.current = {\n                        edits: [],\n                        selection: gridSelectionRef.current,\n                    };\n                }\n                currentBatch.current.edits.push({ cell, newValue: previousValue });\n                // When pasting lots of edits arrive sequentially. Undo/redo should replay in a batch so using a timeout to kick to the end of the event loop\n                timeout.current = setTimeout(() => {\n                    if (currentBatch.current) {\n                        dispatch({\n                            type: \"edit\",\n                            batch: currentBatch.current,\n                        });\n                        currentBatch.current = null;\n                    }\n                }, 0);\n            }\n\n            // Continue with the edit\n            onCellEdited(cell, newValue);\n        },\n        [onCellEdited, getCellContent]\n    );\n\n    const undo = useCallback(() => {\n        dispatch({ type: \"undo\" });\n    }, [dispatch]);\n\n    const redo = useCallback(() => {\n        dispatch({ type: \"redo\" });\n    }, [dispatch]);\n\n    // Apply a batch of edits to the grid\n    useEffect(() => {\n        if (state.operation && gridSelectionRef.current && gridRef.current) {\n            const cells = [] as { cell: Item }[];\n            const previousState: Batch = {\n                edits: [],\n                selection: gridSelectionRef.current,\n            };\n\n            for (const edit of state.operation.edits) {\n                const prevValue = getCellContent(edit.cell) as EditableGridCell;\n                previousState.edits.push({ cell: edit.cell, newValue: prevValue });\n                onCellEdited(edit.cell, edit.newValue);\n                cells.push({ cell: edit.cell });\n            }\n\n            setGridSelection(state.operation.selection);\n            gridSelectionRef.current = state.operation.selection;\n            gridRef.current.updateCells(cells);\n\n            dispatch({\n                type: \"edit\",\n                batch: previousState,\n            });\n\n            dispatch({\n                type: \"operationApplied\",\n            });\n        }\n    }, [state.operation, gridRef, onCellEdited, setGridSelection, getCellContent]);\n\n    // Attach the keyboard shortcuts. CMD+Z and CMD+SHIFT+Z on mac, CTRL+Z and CTRL+Y on windows.\n    useEffect(() => {\n        const onKeyDown = (e: KeyboardEvent) => {\n            if (e.key === \"z\" && (e.metaKey || e.ctrlKey)) {\n                if (e.shiftKey) {\n                    redo();\n                } else {\n                    undo();\n                }\n            }\n\n            if (e.key === \"y\" && (e.metaKey || e.ctrlKey)) {\n                redo();\n            }\n        };\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [undo, redo]);\n\n    return useMemo(() => {\n        return {\n            undo,\n            redo,\n            canUndo: state.canUndo,\n            canRedo: state.canRedo,\n            onCellEdited: wrappedOnCellEdited,\n            onGridSelectionChange: onGridSelectionChangedEdited,\n            gridSelection,\n        };\n    }, [undo, redo, wrappedOnCellEdited, state.canUndo, state.canRedo, onGridSelectionChangedEdited, gridSelection]);\n}\n","import * as React from \"react\";\nimport isArray from \"lodash/isArray.js\";\n\nimport {\n    type CellArray,\n    type EditableGridCell,\n    type GridCell,\n    GridCellKind,\n    type GridColumn,\n    GridColumnIcon,\n    isEditableGridCell,\n    isTextEditableGridCell,\n    type Item,\n    type Rectangle,\n} from \"@glideapps/glide-data-grid\";\n\nimport { faker } from \"@faker-js/faker\";\n\nfaker.seed(1337);\n\nfunction isTruthy(x: any): boolean {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    return x ? true : false;\n}\n\n/**\n * Attempts to copy data between grid cells of any kind.\n */\nexport function lossyCopyData<T extends EditableGridCell>(source: EditableGridCell, target: T): EditableGridCell {\n    const sourceData = source.data;\n    if (typeof sourceData === typeof target.data) {\n        return {\n            ...target,\n            data: sourceData as any,\n        };\n    } else\n        switch (target.kind) {\n            case GridCellKind.Uri: {\n                if (isArray(sourceData)) {\n                    return {\n                        ...target,\n                        data: sourceData[0],\n                    };\n                }\n                return {\n                    ...target,\n                    data: sourceData?.toString() ?? \"\",\n                };\n            }\n            case GridCellKind.Boolean: {\n                if (isArray(sourceData)) {\n                    return {\n                        ...target,\n                        data: sourceData[0] !== undefined,\n                    };\n                } else if (source.kind === GridCellKind.Boolean) {\n                    return {\n                        ...target,\n                        data: source.data,\n                    };\n                }\n                return {\n                    ...target,\n                    data: isTruthy(sourceData) ? true : false,\n                };\n            }\n            case GridCellKind.Image: {\n                if (isArray(sourceData)) {\n                    return {\n                        ...target,\n                        data: [sourceData[0]],\n                    };\n                }\n                return {\n                    ...target,\n                    data: [sourceData?.toString() ?? \"\"],\n                };\n            }\n            case GridCellKind.Number: {\n                return {\n                    ...target,\n                    data: 0,\n                };\n            }\n            case GridCellKind.Text:\n            case GridCellKind.Markdown: {\n                if (isArray(sourceData)) {\n                    return {\n                        ...target,\n                        data: sourceData[0].toString() ?? \"\",\n                    };\n                }\n\n                return {\n                    ...target,\n                    data: source.data?.toString() ?? \"\",\n                };\n            }\n            case GridCellKind.Custom: {\n                return target;\n            }\n            // No default\n        }\n    assertNever(target);\n}\n\nexport type GridColumnWithMockingInfo = GridColumn & {\n    getContent(): GridCell;\n};\n\nexport function getGridColumn(columnWithMock: GridColumnWithMockingInfo): GridColumn {\n    const { getContent, ...rest } = columnWithMock;\n\n    return rest;\n}\n\nfunction getResizableColumns(amount: number, group: boolean): GridColumnWithMockingInfo[] {\n    const defaultColumns: GridColumnWithMockingInfo[] = [\n        {\n            title: \"First name\",\n            id: \"First name\",\n            group: group ? \"Name\" : undefined,\n            icon: GridColumnIcon.HeaderString,\n            hasMenu: false,\n            getContent: () => {\n                const firstName = faker.name.firstName();\n                return {\n                    kind: GridCellKind.Text,\n                    displayData: firstName,\n                    data: firstName,\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n        {\n            title: \"Last name\",\n            id: \"Last name\",\n            group: group ? \"Name\" : undefined,\n            icon: GridColumnIcon.HeaderString,\n            hasMenu: false,\n            getContent: () => {\n                const lastName = faker.name.lastName();\n                return {\n                    kind: GridCellKind.Text,\n                    displayData: lastName,\n                    data: lastName,\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n        {\n            title: \"Avatar\",\n            id: \"Avatar\",\n            group: group ? \"Info\" : undefined,\n            icon: GridColumnIcon.HeaderImage,\n            hasMenu: false,\n            getContent: () => {\n                const n = Math.round(Math.random() * 100);\n                return {\n                    kind: GridCellKind.Image,\n                    data: [`https://picsum.photos/id/${n}/900/900`],\n                    displayData: [`https://picsum.photos/id/${n}/40/40`],\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n        {\n            title: \"Email\",\n            id: \"Email\",\n            group: group ? \"Info\" : undefined,\n            icon: GridColumnIcon.HeaderString,\n            hasMenu: false,\n            getContent: () => {\n                const email = faker.internet.email();\n                return {\n                    kind: GridCellKind.Text,\n                    displayData: email,\n                    data: email,\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n        {\n            title: \"Title\",\n            id: \"Title\",\n            group: group ? \"Info\" : undefined,\n            icon: GridColumnIcon.HeaderString,\n            hasMenu: false,\n            getContent: () => {\n                const company = faker.name.jobTitle();\n                return {\n                    kind: GridCellKind.Text,\n                    displayData: company,\n                    data: company,\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n        {\n            title: \"More Info\",\n            id: \"More Info\",\n            group: group ? \"Info\" : undefined,\n            icon: GridColumnIcon.HeaderUri,\n            hasMenu: false,\n            getContent: () => {\n                const url = faker.internet.url();\n                return {\n                    kind: GridCellKind.Uri,\n                    displayData: url,\n                    data: url,\n                    allowOverlay: true,\n                    readonly: true,\n                };\n            },\n        },\n    ];\n\n    if (amount < defaultColumns.length) {\n        return defaultColumns.slice(0, amount);\n    }\n\n    const extraColumnsAmount = amount - defaultColumns.length;\n\n    const extraColumns = [...new Array(extraColumnsAmount)].map((_, index) =>\n        createTextColumnInfo(index + defaultColumns.length, group)\n    );\n\n    return [...defaultColumns, ...extraColumns];\n}\n\nfunction createTextColumnInfo(index: number, group: boolean): GridColumnWithMockingInfo {\n    return {\n        title: `Column ${index}`,\n        id: `Column ${index}`,\n        group: group ? `Group ${Math.round(index / 3)}` : undefined,\n        icon: GridColumnIcon.HeaderString,\n        hasMenu: false,\n        getContent: () => {\n            const text = faker.lorem.word();\n\n            return {\n                kind: GridCellKind.Text,\n                data: text,\n                displayData: text,\n                allowOverlay: true,\n                readonly: true,\n            };\n        },\n    };\n}\n\nexport class ContentCache {\n    // column -> row -> value\n    private cachedContent: Map<number, GridCell[]> = new Map();\n\n    get(col: number, row: number) {\n        const colCache = this.cachedContent.get(col);\n\n        if (colCache === undefined) {\n            return undefined;\n        }\n\n        return colCache[row];\n    }\n\n    set(col: number, row: number, value: GridCell) {\n        let rowCache = this.cachedContent.get(col);\n        if (rowCache === undefined) {\n            this.cachedContent.set(col, (rowCache = []));\n        }\n        rowCache[row] = value;\n    }\n}\n\nexport function useMockDataGenerator(numCols: number, readonly: boolean = true, group: boolean = false) {\n    const cache = React.useRef<ContentCache>(new ContentCache());\n\n    const [colsMap, setColsMap] = React.useState(() => getResizableColumns(numCols, group));\n\n    React.useEffect(() => {\n        setColsMap(getResizableColumns(numCols, group));\n    }, [group, numCols]);\n\n    const onColumnResize = React.useCallback((column: GridColumn, newSize: number) => {\n        setColsMap(prevColsMap => {\n            const index = prevColsMap.findIndex(ci => ci.title === column.title);\n            const newArray = [...prevColsMap];\n            newArray.splice(index, 1, {\n                ...prevColsMap[index],\n                width: newSize,\n            });\n            return newArray;\n        });\n    }, []);\n\n    const cols = React.useMemo(() => {\n        return colsMap.map(getGridColumn);\n    }, [colsMap]);\n\n    const colsMapRef = React.useRef(colsMap);\n    colsMapRef.current = colsMap;\n    const getCellContent = React.useCallback(\n        ([col, row]: Item): GridCell => {\n            let val = cache.current.get(col, row);\n            if (val === undefined) {\n                val = colsMapRef.current[col].getContent();\n                if (!readonly && isTextEditableGridCell(val)) {\n                    val = { ...val, readonly };\n                }\n                cache.current.set(col, row, val);\n            }\n            return val;\n        },\n        [readonly]\n    );\n\n    const getCellsForSelection = React.useCallback(\n        (selection: Rectangle): CellArray => {\n            const result: GridCell[][] = [];\n\n            for (let y = selection.y; y < selection.y + selection.height; y++) {\n                const row: GridCell[] = [];\n                for (let x = selection.x; x < selection.x + selection.width; x++) {\n                    row.push(getCellContent([x, y]));\n                }\n                result.push(row);\n            }\n\n            return result;\n        },\n        [getCellContent]\n    );\n\n    const setCellValueRaw = React.useCallback(([col, row]: Item, val: GridCell): void => {\n        cache.current.set(col, row, val);\n    }, []);\n\n    const setCellValue = React.useCallback(\n        ([col, row]: Item, val: GridCell): void => {\n            let current = cache.current.get(col, row);\n            if (current === undefined) {\n                current = colsMap[col].getContent();\n            }\n            if (isEditableGridCell(val) && isEditableGridCell(current)) {\n                const copied = lossyCopyData(val, current);\n                cache.current.set(col, row, {\n                    ...copied,\n                    displayData: typeof copied.data === \"string\" ? copied.data : (copied as any).displayData,\n                    lastUpdated: performance.now(),\n                } as any);\n            }\n        },\n        [colsMap]\n    );\n\n    return { cols, getCellContent, onColumnResize, setCellValue, getCellsForSelection, setCellValueRaw };\n}\n\nfunction panic(message: string = \"This should not happen\"): never {\n    throw new Error(message);\n}\n\nexport function assertNever(_never: never): never {\n    return panic(\"Hell froze over\");\n}\n",null,"// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ss4kmn3{box-sizing:border-box;}.ss4kmn3 *,.ss4kmn3 *::before,.ss4kmn3 *::after{box-sizing:inherit;}\\n.bkh67gx{background-color:#2790b9;background:linear-gradient(90deg,#2790b9,#2070a9);color:white;padding:32px 48px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;height:100vh;font-family:sans-serif;}.bkh67gx > h1{font-size:50px;font-weight:600;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 12px 0;}.bkh67gx .sizer{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;background-color:white;border-radius:12px;box-shadow: rgba(9,30,66,0.25) 0px 4px 8px -2px, rgba(9,30,66,0.08) 0px 0px 0px 1px;}.bkh67gx .sizer .sizer-clip{border-radius:12px;overflow:hidden;-webkit-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0);height:100%;}\\n.d1deot3s{font-size:18px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 20px 0;}\\n.m1ml0sw1{font-size:14px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 20px 0;}.m1ml0sw1 button{background-color:#f4f4f4;color:#2b2b2b;padding:2px 6px;font-family:monospace;font-size:14px;border-radius:4px;box-shadow:0px 1px 2px #00000040;margin:0 0.1em;border:none;cursor:pointer;}\\n/*# sourceMappingURL=data:application/json;base64,*/\", \"\",{\"version\":3,\"sources\":[\"/home/runner/work/glide-data-grid/glide-data-grid/packages/source/src/stories/use-data-source.stories.tsx\",\"webpack://./packages/source/src/stories/use-data-source.stories.tsx\"],\"names\":[\".ss4kmn3\",\".bkh67gx\",\".d1deot3s\",\".m1ml0sw1\"],\"mappings\":\"AAkDsBA,SAAAA,qBAAAA,CAAAA,CAAAA,gDAAAA,kBAAAA,CAAAA;AAmECC,SAAAA,wBAAAA,CAAAA,iDAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,CAAAA,mBAAAA,CAAAA,oBAAAA,CAAAA,mBAAAA,CAAAA,YAAAA,CAAAA,6BAAAA,CAAAA,yBAAAA,CAAAA,qBAAAA,CAAAA,YAAAA,CAAAA,sBAAAA,CAAAA,CAAAA,cAAAA,cAAAA,CAAAA,eAAAA,CAAAA,qBAAAA,CAAAA,mBAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CAAAA,CAAAA,gBAAAA,kBAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,kBAAAA,CAAAA,mFAAAA,CAAAA,CAAAA,4BAAAA,kBAAAA,CAAAA,eAAAA,CAAAA,+BAAAA,CAAAA,2BAAAA,CAAAA,uBAAAA,CAAAA,WAAAA,CAAAA;AAuEHC,UAAAA,cAAAA,CAAAA,qBAAAA,CAAAA,mBAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CAAAA;AAKIC,UAAAA,cAAAA,CAAAA,qBAAAA,CAAAA,mBAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CAAAA,CAAAA,iBAAAA,wBAAAA,CAAAA,aAAAA,CAAAA,eAAAA,CAAAA,qBAAAA,CAAAA,cAAAA,CAAAA,iBAAAA,CAAAA,gCAAAA,CAAAA,cAAAA,CAAAA,WAAAA,CAAAA,cAAAA,CAAAA;AC7LxB,myvCAAmyvC\",\"sourcesContent\":[\"var __STORY__ = \\\"import { styled } from \\\\\\\"@linaria/react\\\\\\\";\\\\nimport * as React from \\\\\\\"react\\\\\\\";\\\\nimport { useResizeDetector } from \\\\\\\"react-resize-detector\\\\\\\";\\\\nimport {\\\\n    DataEditor,\\\\n    type DataEditorProps,\\\\n    type DataEditorRef,\\\\n    GridCellKind,\\\\n    type GridColumn,\\\\n    type Theme,\\\\n} from \\\\\\\"@glideapps/glide-data-grid\\\\\\\";\\\\nimport { faker } from \\\\\\\"@faker-js/faker\\\\\\\";\\\\nimport { useCollapsingGroups, useColumnSort, useMoveableColumns } from \\\\\\\"../index.js\\\\\\\";\\\\nimport { useUndoRedo } from \\\\\\\"../use-undo-redo.js\\\\\\\";\\\\nimport { useMockDataGenerator } from \\\\\\\"./utils.js\\\\\\\";\\\\n\\\\nfaker.seed(1337);\\\\n\\\\nconst SimpleWrapper = styled.div`\\\\n    box-sizing: border-box;\\\\n\\\\n    *,\\\\n    *::before,\\\\n    *::after {\\\\n        box-sizing: inherit;\\\\n    }\\\\n`;\\\\n\\\\nconst SimpleThemeWrapper: React.FC = p => {\\\\n    return (\\\\n        <SimpleWrapper>\\\\n            <div className=\\\\\\\"content\\\\\\\">{p.children}</div>\\\\n        </SimpleWrapper>\\\\n    );\\\\n};\\\\n\\\\nexport default {\\\\n    title: \\\\\\\"Extra Packages/Source\\\\\\\",\\\\n\\\\n    decorators: [\\\\n        (Story: React.ComponentType) => (\\\\n            <SimpleThemeWrapper>\\\\n                <Story />\\\\n            </SimpleThemeWrapper>\\\\n        ),\\\\n    ],\\\\n};\\\\n\\\\nconst BeautifulStyle = styled.div`\\\\n    background-color: #2790b9;\\\\n    background: linear-gradient(90deg, #2790b9, #2070a9);\\\\n    color: white;\\\\n\\\\n    padding: 32px 48px;\\\\n\\\\n    display: flex;\\\\n    flex-direction: column;\\\\n    height: 100vh;\\\\n\\\\n    font-family: sans-serif;\\\\n\\\\n    & > h1 {\\\\n        font-size: 50px;\\\\n        font-weight: 600;\\\\n        flex-shrink: 0;\\\\n        margin: 0 0 12px 0;\\\\n    }\\\\n\\\\n    .sizer {\\\\n        flex-grow: 1;\\\\n\\\\n        background-color: white;\\\\n\\\\n        border-radius: 12px;\\\\n        box-shadow:\\\\n            rgba(9, 30, 66, 0.25) 0px 4px 8px -2px,\\\\n            rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;\\\\n\\\\n        .sizer-clip {\\\\n            border-radius: 12px;\\\\n            overflow: hidden;\\\\n            transform: translateZ(0);\\\\n\\\\n            height: 100%;\\\\n        }\\\\n    }\\\\n`;\\\\n\\\\ninterface BeautifulProps {\\\\n    title: string;\\\\n    description?: React.ReactNode;\\\\n}\\\\n\\\\nconst BeautifulWrapper: React.FC<BeautifulProps> = p => {\\\\n    const { title, children, description } = p;\\\\n\\\\n    const { ref, width, height } = useResizeDetector();\\\\n\\\\n    return (\\\\n        <BeautifulStyle>\\\\n            <h1>{title}</h1>\\\\n            {description}\\\\n            <div className=\\\\\\\"sizer\\\\\\\">\\\\n                <div className=\\\\\\\"sizer-clip\\\\\\\" ref={ref}>\\\\n                    <div\\\\n                        style={{\\\\n                            position: \\\\\\\"relative\\\\\\\",\\\\n                            width: width ?? 100,\\\\n                            height: height ?? 100,\\\\n                        }}>\\\\n                        {children}\\\\n                    </div>\\\\n                </div>\\\\n            </div>\\\\n        </BeautifulStyle>\\\\n    );\\\\n};\\\\n\\\\nconst Description = styled.p`\\\\n    font-size: 18px;\\\\n    flex-shrink: 0;\\\\n    margin: 0 0 20px 0;\\\\n`;\\\\n\\\\nexport const MoreInfo = styled.p`\\\\n    font-size: 14px;\\\\n    flex-shrink: 0;\\\\n    margin: 0 0 20px 0;\\\\n\\\\n    button {\\\\n        background-color: #f4f4f4;\\\\n        color: #2b2b2b;\\\\n        padding: 2px 6px;\\\\n        font-family: monospace;\\\\n        font-size: 14px;\\\\n        border-radius: 4px;\\\\n        box-shadow: 0px 1px 2px #00000040;\\\\n        margin: 0 0.1em;\\\\n        border: none;\\\\n        cursor: pointer;\\\\n    }\\\\n`;\\\\n\\\\nconst defaultProps: Partial<DataEditorProps> = {\\\\n    smoothScrollX: true,\\\\n    smoothScrollY: true,\\\\n    isDraggable: false,\\\\n    rowMarkers: \\\\\\\"none\\\\\\\",\\\\n    width: \\\\\\\"100%\\\\\\\",\\\\n};\\\\n\\\\nconst testTheme: Theme = {\\\\n    accentColor: \\\\\\\"#4F5DFF\\\\\\\",\\\\n    accentFg: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    accentLight: \\\\\\\"rgba(62, 116, 253, 0.1)\\\\\\\",\\\\n\\\\n    textDark: \\\\\\\"#313139\\\\\\\",\\\\n    textMedium: \\\\\\\"#737383\\\\\\\",\\\\n    textLight: \\\\\\\"#B2B2C0\\\\\\\",\\\\n    textBubble: \\\\\\\"#313139\\\\\\\",\\\\n\\\\n    bgIconHeader: \\\\\\\"#737383\\\\\\\",\\\\n    fgIconHeader: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    textHeader: \\\\\\\"#313139\\\\\\\",\\\\n    textGroupHeader: \\\\\\\"#313139BB\\\\\\\",\\\\n    textHeaderSelected: \\\\\\\"#FFFFFF\\\\\\\",\\\\n\\\\n    bgCell: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    bgCellMedium: \\\\\\\"#FAFAFB\\\\\\\",\\\\n    bgHeader: \\\\\\\"#F7F7F8\\\\\\\",\\\\n    bgHeaderHasFocus: \\\\\\\"#E9E9EB\\\\\\\",\\\\n    bgHeaderHovered: \\\\\\\"#EFEFF1\\\\\\\",\\\\n\\\\n    bgBubble: \\\\\\\"#EDEDF3\\\\\\\",\\\\n    bgBubbleSelected: \\\\\\\"#FFFFFF\\\\\\\",\\\\n\\\\n    headerIconSize: 20,\\\\n    markerFontStyle: \\\\\\\"13px\\\\\\\",\\\\n\\\\n    bgSearchResult: \\\\\\\"#fff9e3\\\\\\\",\\\\n\\\\n    borderColor: \\\\\\\"rgba(115, 116, 131, 0.16)\\\\\\\",\\\\n    horizontalBorderColor: \\\\\\\"rgba(115, 116, 131, 0.16)\\\\\\\",\\\\n    drilldownBorder: \\\\\\\"rgba(0, 0, 0, 0)\\\\\\\",\\\\n\\\\n    linkColor: \\\\\\\"#4F5DFF\\\\\\\",\\\\n\\\\n    cellHorizontalPadding: 8,\\\\n    cellVerticalPadding: 3,\\\\n\\\\n    headerFontStyle: \\\\\\\"600 13px\\\\\\\",\\\\n    baseFontStyle: \\\\\\\"13px\\\\\\\",\\\\n    editorFontSize: \\\\\\\"13px\\\\\\\",\\\\n    lineHeight: 1.4,\\\\n    fontFamily:\\\\n        \\\\\\\"Inter, Roboto, -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Ubuntu, noto, arial, sans-serif\\\\\\\",\\\\n};\\\\n\\\\nconst cols: GridColumn[] = [\\\\n    {\\\\n        title: \\\\\\\"A\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 1\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"B\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 1\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"C\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"D\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"E\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n];\\\\n\\\\nexport const UseDataSource: React.VFC = () => {\\\\n    const cache = React.useRef<Record<string, string>>({});\\\\n\\\\n    const rows = 100_000;\\\\n\\\\n    const moveArgs = useMoveableColumns({\\\\n        columns: cols,\\\\n        getCellContent: React.useCallback(([col, row]) => {\\\\n            if (col === 0) {\\\\n                return {\\\\n                    kind: GridCellKind.Text,\\\\n                    allowOverlay: true,\\\\n                    data: `${row}`,\\\\n                    displayData: `${row}`,\\\\n                };\\\\n            }\\\\n\\\\n            const key = `${col},${row}`;\\\\n            if (cache.current[key] === undefined) {\\\\n                cache.current[key] = faker.name.firstName() + \\\\\\\" \\\\\\\" + faker.name.lastName();\\\\n            }\\\\n            const d = cache.current[key];\\\\n\\\\n            return {\\\\n                kind: GridCellKind.Text,\\\\n                allowOverlay: true,\\\\n                data: d,\\\\n                displayData: d,\\\\n            };\\\\n        }, []),\\\\n    });\\\\n\\\\n    const [sort, setSort] = React.useState<number>();\\\\n\\\\n    const sortArgs = useColumnSort({\\\\n        columns: moveArgs.columns,\\\\n        getCellContent: moveArgs.getCellContent,\\\\n        rows,\\\\n        sort:\\\\n            sort === undefined\\\\n                ? undefined\\\\n                : {\\\\n                      column: moveArgs.columns[sort],\\\\n                      direction: \\\\\\\"desc\\\\\\\",\\\\n                      mode: \\\\\\\"smart\\\\\\\",\\\\n                  },\\\\n    });\\\\n\\\\n    const collapseArgs = useCollapsingGroups({\\\\n        columns: moveArgs.columns,\\\\n        theme: testTheme,\\\\n        freezeColumns: 0,\\\\n    });\\\\n\\\\n    const onHeaderClick = React.useCallback((index: number) => {\\\\n        setSort(index);\\\\n    }, []);\\\\n\\\\n    return (\\\\n        <BeautifulWrapper title=\\\\\\\"Custom source extensions\\\\\\\" description={<Description>Fixme.</Description>}>\\\\n            <DataEditor\\\\n                {...defaultProps}\\\\n                {...moveArgs}\\\\n                {...sortArgs}\\\\n                {...collapseArgs}\\\\n                rows={rows}\\\\n                onColumnMoved={moveArgs.onColumnMoved}\\\\n                onHeaderClicked={onHeaderClick}\\\\n            />\\\\n        </BeautifulWrapper>\\\\n    );\\\\n};\\\\n(UseDataSource as any).parameters = {\\\\n    options: {\\\\n        showPanel: false,\\\\n    },\\\\n};\\\\n\\\\nexport const UndoRedo: React.VFC = () => {\\\\n    const { cols: columns, getCellContent, setCellValue } = useMockDataGenerator(6);\\\\n\\\\n    const gridRef = React.useRef<DataEditorRef>(null);\\\\n\\\\n    const { gridSelection, onCellEdited, onGridSelectionChange, undo, canRedo, canUndo, redo } = useUndoRedo(\\\\n        gridRef,\\\\n        getCellContent,\\\\n        setCellValue\\\\n    );\\\\n\\\\n    return (\\\\n        <BeautifulWrapper\\\\n            title=\\\\\\\"Undo / Redo Support\\\\\\\"\\\\n            description={\\\\n                <Description>\\\\n                    A simple undo/redo implementation\\\\n                    <MoreInfo>\\\\n                        Use keyboard shortcuts CMD+Z and CMD+SHIFT+Z / CTRL+Z and CTRL+Y. Or click these buttons:\\\\n                        <button onClick={undo} disabled={!canUndo} style={{ opacity: canUndo ? 1 : 0.4 }}>\\\\n                            Undo\\\\n                        </button>\\\\n                        <button onClick={redo} disabled={!canRedo} style={{ opacity: canRedo ? 1 : 0.4 }}>\\\\n                            Redo\\\\n                        </button>\\\\n                    </MoreInfo>\\\\n                    <MoreInfo>\\\\n                        It works by taking a snapshot of the content of a cell before it is edited and replaying any\\\\n                        edits back.\\\\n                    </MoreInfo>\\\\n                </Description>\\\\n            }>\\\\n            <DataEditor\\\\n                {...defaultProps}\\\\n                ref={gridRef}\\\\n                onCellEdited={onCellEdited}\\\\n                getCellContent={getCellContent}\\\\n                gridSelection={gridSelection ?? undefined}\\\\n                onGridSelectionChange={onGridSelectionChange}\\\\n                columns={columns}\\\\n                rows={1000}\\\\n            />\\\\n        </BeautifulWrapper>\\\\n    );\\\\n};\\\\n(UndoRedo as any).parameters = {\\\\n    options: {\\\\n        showPanel: false,\\\\n    },\\\\n};\\\\n\\\";\\nvar __LOCATIONS_MAP__ = {\\n  \\\"UseDataSource\\\": {\\n    \\\"startLoc\\\": {\\n      \\\"col\\\": 40,\\n      \\\"line\\\": 227\\n    },\\n    \\\"endLoc\\\": {\\n      \\\"col\\\": 1,\\n      \\\"line\\\": 298\\n    },\\n    \\\"startBody\\\": {\\n      \\\"col\\\": 40,\\n      \\\"line\\\": 227\\n    },\\n    \\\"endBody\\\": {\\n      \\\"col\\\": 1,\\n      \\\"line\\\": 298\\n    }\\n  },\\n  \\\"UndoRedo\\\": {\\n    \\\"startLoc\\\": {\\n      \\\"col\\\": 35,\\n      \\\"line\\\": 305\\n    },\\n    \\\"endLoc\\\": {\\n      \\\"col\\\": 1,\\n      \\\"line\\\": 349\\n    },\\n    \\\"startBody\\\": {\\n      \\\"col\\\": 35,\\n      \\\"line\\\": 305\\n    },\\n    \\\"endBody\\\": {\\n      \\\"col\\\": 1,\\n      \\\"line\\\": 349\\n    }\\n  }\\n};\\nimport { styled } from \\\"@linaria/react\\\";\\nimport * as React from \\\"react\\\";\\nimport { useResizeDetector } from \\\"react-resize-detector\\\";\\nimport { DataEditor, GridCellKind } from \\\"@glideapps/glide-data-grid\\\";\\nimport { faker } from \\\"@faker-js/faker\\\";\\nimport { useCollapsingGroups, useColumnSort, useMoveableColumns } from \\\"../index.js\\\";\\nimport { useUndoRedo } from \\\"../use-undo-redo.js\\\";\\nimport { useMockDataGenerator } from \\\"./utils.js\\\";\\nimport { jsx as _jsx } from \\\"react/jsx-runtime\\\";\\nimport { jsxs as _jsxs } from \\\"react/jsx-runtime\\\";\\nfaker.seed(1337);\\nconst SimpleWrapper = styled.div`\\n    box-sizing: border-box;\\n\\n    *,\\n    *::before,\\n    *::after {\\n        box-sizing: inherit;\\n    }\\n`;\\nconst SimpleThemeWrapper = p => {\\n  return _jsx(SimpleWrapper, {\\n    children: _jsx(\\\"div\\\", {\\n      className: \\\"content\\\",\\n      children: p.children\\n    })\\n  });\\n};\\nSimpleThemeWrapper.displayName = \\\"SimpleThemeWrapper\\\";\\nexport default {\\n  parameters: {\\n    \\\"storySource\\\": {\\n      \\\"source\\\": \\\"import { styled } from \\\\\\\"@linaria/react\\\\\\\";\\\\nimport * as React from \\\\\\\"react\\\\\\\";\\\\nimport { useResizeDetector } from \\\\\\\"react-resize-detector\\\\\\\";\\\\nimport {\\\\n    DataEditor,\\\\n    type DataEditorProps,\\\\n    type DataEditorRef,\\\\n    GridCellKind,\\\\n    type GridColumn,\\\\n    type Theme,\\\\n} from \\\\\\\"@glideapps/glide-data-grid\\\\\\\";\\\\nimport { faker } from \\\\\\\"@faker-js/faker\\\\\\\";\\\\nimport { useCollapsingGroups, useColumnSort, useMoveableColumns } from \\\\\\\"../index.js\\\\\\\";\\\\nimport { useUndoRedo } from \\\\\\\"../use-undo-redo.js\\\\\\\";\\\\nimport { useMockDataGenerator } from \\\\\\\"./utils.js\\\\\\\";\\\\n\\\\nfaker.seed(1337);\\\\n\\\\nconst SimpleWrapper = styled.div`\\\\n    box-sizing: border-box;\\\\n\\\\n    *,\\\\n    *::before,\\\\n    *::after {\\\\n        box-sizing: inherit;\\\\n    }\\\\n`;\\\\n\\\\nconst SimpleThemeWrapper: React.FC = p => {\\\\n    return (\\\\n        <SimpleWrapper>\\\\n            <div className=\\\\\\\"content\\\\\\\">{p.children}</div>\\\\n        </SimpleWrapper>\\\\n    );\\\\n};\\\\n\\\\nexport default {\\\\n    title: \\\\\\\"Extra Packages/Source\\\\\\\",\\\\n\\\\n    decorators: [\\\\n        (Story: React.ComponentType) => (\\\\n            <SimpleThemeWrapper>\\\\n                <Story />\\\\n            </SimpleThemeWrapper>\\\\n        ),\\\\n    ],\\\\n};\\\\n\\\\nconst BeautifulStyle = styled.div`\\\\n    background-color: #2790b9;\\\\n    background: linear-gradient(90deg, #2790b9, #2070a9);\\\\n    color: white;\\\\n\\\\n    padding: 32px 48px;\\\\n\\\\n    display: flex;\\\\n    flex-direction: column;\\\\n    height: 100vh;\\\\n\\\\n    font-family: sans-serif;\\\\n\\\\n    & > h1 {\\\\n        font-size: 50px;\\\\n        font-weight: 600;\\\\n        flex-shrink: 0;\\\\n        margin: 0 0 12px 0;\\\\n    }\\\\n\\\\n    .sizer {\\\\n        flex-grow: 1;\\\\n\\\\n        background-color: white;\\\\n\\\\n        border-radius: 12px;\\\\n        box-shadow:\\\\n            rgba(9, 30, 66, 0.25) 0px 4px 8px -2px,\\\\n            rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;\\\\n\\\\n        .sizer-clip {\\\\n            border-radius: 12px;\\\\n            overflow: hidden;\\\\n            transform: translateZ(0);\\\\n\\\\n            height: 100%;\\\\n        }\\\\n    }\\\\n`;\\\\n\\\\ninterface BeautifulProps {\\\\n    title: string;\\\\n    description?: React.ReactNode;\\\\n}\\\\n\\\\nconst BeautifulWrapper: React.FC<BeautifulProps> = p => {\\\\n    const { title, children, description } = p;\\\\n\\\\n    const { ref, width, height } = useResizeDetector();\\\\n\\\\n    return (\\\\n        <BeautifulStyle>\\\\n            <h1>{title}</h1>\\\\n            {description}\\\\n            <div className=\\\\\\\"sizer\\\\\\\">\\\\n                <div className=\\\\\\\"sizer-clip\\\\\\\" ref={ref}>\\\\n                    <div\\\\n                        style={{\\\\n                            position: \\\\\\\"relative\\\\\\\",\\\\n                            width: width ?? 100,\\\\n                            height: height ?? 100,\\\\n                        }}>\\\\n                        {children}\\\\n                    </div>\\\\n                </div>\\\\n            </div>\\\\n        </BeautifulStyle>\\\\n    );\\\\n};\\\\n\\\\nconst Description = styled.p`\\\\n    font-size: 18px;\\\\n    flex-shrink: 0;\\\\n    margin: 0 0 20px 0;\\\\n`;\\\\n\\\\nexport const MoreInfo = styled.p`\\\\n    font-size: 14px;\\\\n    flex-shrink: 0;\\\\n    margin: 0 0 20px 0;\\\\n\\\\n    button {\\\\n        background-color: #f4f4f4;\\\\n        color: #2b2b2b;\\\\n        padding: 2px 6px;\\\\n        font-family: monospace;\\\\n        font-size: 14px;\\\\n        border-radius: 4px;\\\\n        box-shadow: 0px 1px 2px #00000040;\\\\n        margin: 0 0.1em;\\\\n        border: none;\\\\n        cursor: pointer;\\\\n    }\\\\n`;\\\\n\\\\nconst defaultProps: Partial<DataEditorProps> = {\\\\n    smoothScrollX: true,\\\\n    smoothScrollY: true,\\\\n    isDraggable: false,\\\\n    rowMarkers: \\\\\\\"none\\\\\\\",\\\\n    width: \\\\\\\"100%\\\\\\\",\\\\n};\\\\n\\\\nconst testTheme: Theme = {\\\\n    accentColor: \\\\\\\"#4F5DFF\\\\\\\",\\\\n    accentFg: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    accentLight: \\\\\\\"rgba(62, 116, 253, 0.1)\\\\\\\",\\\\n\\\\n    textDark: \\\\\\\"#313139\\\\\\\",\\\\n    textMedium: \\\\\\\"#737383\\\\\\\",\\\\n    textLight: \\\\\\\"#B2B2C0\\\\\\\",\\\\n    textBubble: \\\\\\\"#313139\\\\\\\",\\\\n\\\\n    bgIconHeader: \\\\\\\"#737383\\\\\\\",\\\\n    fgIconHeader: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    textHeader: \\\\\\\"#313139\\\\\\\",\\\\n    textGroupHeader: \\\\\\\"#313139BB\\\\\\\",\\\\n    textHeaderSelected: \\\\\\\"#FFFFFF\\\\\\\",\\\\n\\\\n    bgCell: \\\\\\\"#FFFFFF\\\\\\\",\\\\n    bgCellMedium: \\\\\\\"#FAFAFB\\\\\\\",\\\\n    bgHeader: \\\\\\\"#F7F7F8\\\\\\\",\\\\n    bgHeaderHasFocus: \\\\\\\"#E9E9EB\\\\\\\",\\\\n    bgHeaderHovered: \\\\\\\"#EFEFF1\\\\\\\",\\\\n\\\\n    bgBubble: \\\\\\\"#EDEDF3\\\\\\\",\\\\n    bgBubbleSelected: \\\\\\\"#FFFFFF\\\\\\\",\\\\n\\\\n    headerIconSize: 20,\\\\n    markerFontStyle: \\\\\\\"13px\\\\\\\",\\\\n\\\\n    bgSearchResult: \\\\\\\"#fff9e3\\\\\\\",\\\\n\\\\n    borderColor: \\\\\\\"rgba(115, 116, 131, 0.16)\\\\\\\",\\\\n    horizontalBorderColor: \\\\\\\"rgba(115, 116, 131, 0.16)\\\\\\\",\\\\n    drilldownBorder: \\\\\\\"rgba(0, 0, 0, 0)\\\\\\\",\\\\n\\\\n    linkColor: \\\\\\\"#4F5DFF\\\\\\\",\\\\n\\\\n    cellHorizontalPadding: 8,\\\\n    cellVerticalPadding: 3,\\\\n\\\\n    headerFontStyle: \\\\\\\"600 13px\\\\\\\",\\\\n    baseFontStyle: \\\\\\\"13px\\\\\\\",\\\\n    editorFontSize: \\\\\\\"13px\\\\\\\",\\\\n    lineHeight: 1.4,\\\\n    fontFamily:\\\\n        \\\\\\\"Inter, Roboto, -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Ubuntu, noto, arial, sans-serif\\\\\\\",\\\\n};\\\\n\\\\nconst cols: GridColumn[] = [\\\\n    {\\\\n        title: \\\\\\\"A\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 1\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"B\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 1\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"C\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"D\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n    {\\\\n        title: \\\\\\\"E\\\\\\\",\\\\n        width: 200,\\\\n        group: \\\\\\\"Group 2\\\\\\\",\\\\n    },\\\\n];\\\\n\\\\nexport const UseDataSource: React.VFC = () => {\\\\n    const cache = React.useRef<Record<string, string>>({});\\\\n\\\\n    const rows = 100_000;\\\\n\\\\n    const moveArgs = useMoveableColumns({\\\\n        columns: cols,\\\\n        getCellContent: React.useCallback(([col, row]) => {\\\\n            if (col === 0) {\\\\n                return {\\\\n                    kind: GridCellKind.Text,\\\\n                    allowOverlay: true,\\\\n                    data: `${row}`,\\\\n                    displayData: `${row}`,\\\\n                };\\\\n            }\\\\n\\\\n            const key = `${col},${row}`;\\\\n            if (cache.current[key] === undefined) {\\\\n                cache.current[key] = faker.name.firstName() + \\\\\\\" \\\\\\\" + faker.name.lastName();\\\\n            }\\\\n            const d = cache.current[key];\\\\n\\\\n            return {\\\\n                kind: GridCellKind.Text,\\\\n                allowOverlay: true,\\\\n                data: d,\\\\n                displayData: d,\\\\n            };\\\\n        }, []),\\\\n    });\\\\n\\\\n    const [sort, setSort] = React.useState<number>();\\\\n\\\\n    const sortArgs = useColumnSort({\\\\n        columns: moveArgs.columns,\\\\n        getCellContent: moveArgs.getCellContent,\\\\n        rows,\\\\n        sort:\\\\n            sort === undefined\\\\n                ? undefined\\\\n                : {\\\\n                      column: moveArgs.columns[sort],\\\\n                      direction: \\\\\\\"desc\\\\\\\",\\\\n                      mode: \\\\\\\"smart\\\\\\\",\\\\n                  },\\\\n    });\\\\n\\\\n    const collapseArgs = useCollapsingGroups({\\\\n        columns: moveArgs.columns,\\\\n        theme: testTheme,\\\\n        freezeColumns: 0,\\\\n    });\\\\n\\\\n    const onHeaderClick = React.useCallback((index: number) => {\\\\n        setSort(index);\\\\n    }, []);\\\\n\\\\n    return (\\\\n        <BeautifulWrapper title=\\\\\\\"Custom source extensions\\\\\\\" description={<Description>Fixme.</Description>}>\\\\n            <DataEditor\\\\n                {...defaultProps}\\\\n                {...moveArgs}\\\\n                {...sortArgs}\\\\n                {...collapseArgs}\\\\n                rows={rows}\\\\n                onColumnMoved={moveArgs.onColumnMoved}\\\\n                onHeaderClicked={onHeaderClick}\\\\n            />\\\\n        </BeautifulWrapper>\\\\n    );\\\\n};\\\\n(UseDataSource as any).parameters = {\\\\n    options: {\\\\n        showPanel: false,\\\\n    },\\\\n};\\\\n\\\\nexport const UndoRedo: React.VFC = () => {\\\\n    const { cols: columns, getCellContent, setCellValue } = useMockDataGenerator(6);\\\\n\\\\n    const gridRef = React.useRef<DataEditorRef>(null);\\\\n\\\\n    const { gridSelection, onCellEdited, onGridSelectionChange, undo, canRedo, canUndo, redo } = useUndoRedo(\\\\n        gridRef,\\\\n        getCellContent,\\\\n        setCellValue\\\\n    );\\\\n\\\\n    return (\\\\n        <BeautifulWrapper\\\\n            title=\\\\\\\"Undo / Redo Support\\\\\\\"\\\\n            description={\\\\n                <Description>\\\\n                    A simple undo/redo implementation\\\\n                    <MoreInfo>\\\\n                        Use keyboard shortcuts CMD+Z and CMD+SHIFT+Z / CTRL+Z and CTRL+Y. Or click these buttons:\\\\n                        <button onClick={undo} disabled={!canUndo} style={{ opacity: canUndo ? 1 : 0.4 }}>\\\\n                            Undo\\\\n                        </button>\\\\n                        <button onClick={redo} disabled={!canRedo} style={{ opacity: canRedo ? 1 : 0.4 }}>\\\\n                            Redo\\\\n                        </button>\\\\n                    </MoreInfo>\\\\n                    <MoreInfo>\\\\n                        It works by taking a snapshot of the content of a cell before it is edited and replaying any\\\\n                        edits back.\\\\n                    </MoreInfo>\\\\n                </Description>\\\\n            }>\\\\n            <DataEditor\\\\n                {...defaultProps}\\\\n                ref={gridRef}\\\\n                onCellEdited={onCellEdited}\\\\n                getCellContent={getCellContent}\\\\n                gridSelection={gridSelection ?? undefined}\\\\n                onGridSelectionChange={onGridSelectionChange}\\\\n                columns={columns}\\\\n                rows={1000}\\\\n            />\\\\n        </BeautifulWrapper>\\\\n    );\\\\n};\\\\n(UndoRedo as any).parameters = {\\\\n    options: {\\\\n        showPanel: false,\\\\n    },\\\\n};\\\\n\\\",\\n      \\\"locationsMap\\\": {\\n        \\\"use-data-source\\\": {\\n          \\\"startLoc\\\": {\\n            \\\"col\\\": 40,\\n            \\\"line\\\": 227\\n          },\\n          \\\"endLoc\\\": {\\n            \\\"col\\\": 1,\\n            \\\"line\\\": 298\\n          },\\n          \\\"startBody\\\": {\\n            \\\"col\\\": 40,\\n            \\\"line\\\": 227\\n          },\\n          \\\"endBody\\\": {\\n            \\\"col\\\": 1,\\n            \\\"line\\\": 298\\n          }\\n        },\\n        \\\"undo-redo\\\": {\\n          \\\"startLoc\\\": {\\n            \\\"col\\\": 35,\\n            \\\"line\\\": 305\\n          },\\n          \\\"endLoc\\\": {\\n            \\\"col\\\": 1,\\n            \\\"line\\\": 349\\n          },\\n          \\\"startBody\\\": {\\n            \\\"col\\\": 35,\\n            \\\"line\\\": 305\\n          },\\n          \\\"endBody\\\": {\\n            \\\"col\\\": 1,\\n            \\\"line\\\": 349\\n          }\\n        }\\n      }\\n    }\\n  },\\n  title: \\\"Extra Packages/Source\\\",\\n  decorators: [Story => _jsx(SimpleThemeWrapper, {\\n    children: _jsx(Story, {})\\n  })]\\n};\\nconst BeautifulStyle = styled.div`\\n    background-color: #2790b9;\\n    background: linear-gradient(90deg, #2790b9, #2070a9);\\n    color: white;\\n\\n    padding: 32px 48px;\\n\\n    display: flex;\\n    flex-direction: column;\\n    height: 100vh;\\n\\n    font-family: sans-serif;\\n\\n    & > h1 {\\n        font-size: 50px;\\n        font-weight: 600;\\n        flex-shrink: 0;\\n        margin: 0 0 12px 0;\\n    }\\n\\n    .sizer {\\n        flex-grow: 1;\\n\\n        background-color: white;\\n\\n        border-radius: 12px;\\n        box-shadow:\\n            rgba(9, 30, 66, 0.25) 0px 4px 8px -2px,\\n            rgba(9, 30, 66, 0.08) 0px 0px 0px 1px;\\n\\n        .sizer-clip {\\n            border-radius: 12px;\\n            overflow: hidden;\\n            transform: translateZ(0);\\n\\n            height: 100%;\\n        }\\n    }\\n`;\\nconst BeautifulWrapper = p => {\\n  const {\\n    title,\\n    children,\\n    description\\n  } = p;\\n  const {\\n    ref,\\n    width,\\n    height\\n  } = useResizeDetector();\\n  return _jsxs(BeautifulStyle, {\\n    children: [_jsx(\\\"h1\\\", {\\n      children: title\\n    }), description, _jsx(\\\"div\\\", {\\n      className: \\\"sizer\\\",\\n      children: _jsx(\\\"div\\\", {\\n        className: \\\"sizer-clip\\\",\\n        ref: ref,\\n        children: _jsx(\\\"div\\\", {\\n          style: {\\n            position: \\\"relative\\\",\\n            width: width !== null && width !== void 0 ? width : 100,\\n            height: height !== null && height !== void 0 ? height : 100\\n          },\\n          children: children\\n        })\\n      })\\n    })]\\n  });\\n};\\nBeautifulWrapper.displayName = \\\"BeautifulWrapper\\\";\\nconst Description = styled.p`\\n    font-size: 18px;\\n    flex-shrink: 0;\\n    margin: 0 0 20px 0;\\n`;\\nexport const MoreInfo = styled.p`\\n    font-size: 14px;\\n    flex-shrink: 0;\\n    margin: 0 0 20px 0;\\n\\n    button {\\n        background-color: #f4f4f4;\\n        color: #2b2b2b;\\n        padding: 2px 6px;\\n        font-family: monospace;\\n        font-size: 14px;\\n        border-radius: 4px;\\n        box-shadow: 0px 1px 2px #00000040;\\n        margin: 0 0.1em;\\n        border: none;\\n        cursor: pointer;\\n    }\\n`;\\nconst defaultProps = {\\n  smoothScrollX: true,\\n  smoothScrollY: true,\\n  isDraggable: false,\\n  rowMarkers: \\\"none\\\",\\n  width: \\\"100%\\\"\\n};\\nconst testTheme = {\\n  accentColor: \\\"#4F5DFF\\\",\\n  accentFg: \\\"#FFFFFF\\\",\\n  accentLight: \\\"rgba(62, 116, 253, 0.1)\\\",\\n  textDark: \\\"#313139\\\",\\n  textMedium: \\\"#737383\\\",\\n  textLight: \\\"#B2B2C0\\\",\\n  textBubble: \\\"#313139\\\",\\n  bgIconHeader: \\\"#737383\\\",\\n  fgIconHeader: \\\"#FFFFFF\\\",\\n  textHeader: \\\"#313139\\\",\\n  textGroupHeader: \\\"#313139BB\\\",\\n  textHeaderSelected: \\\"#FFFFFF\\\",\\n  bgCell: \\\"#FFFFFF\\\",\\n  bgCellMedium: \\\"#FAFAFB\\\",\\n  bgHeader: \\\"#F7F7F8\\\",\\n  bgHeaderHasFocus: \\\"#E9E9EB\\\",\\n  bgHeaderHovered: \\\"#EFEFF1\\\",\\n  bgBubble: \\\"#EDEDF3\\\",\\n  bgBubbleSelected: \\\"#FFFFFF\\\",\\n  headerIconSize: 20,\\n  markerFontStyle: \\\"13px\\\",\\n  bgSearchResult: \\\"#fff9e3\\\",\\n  borderColor: \\\"rgba(115, 116, 131, 0.16)\\\",\\n  horizontalBorderColor: \\\"rgba(115, 116, 131, 0.16)\\\",\\n  drilldownBorder: \\\"rgba(0, 0, 0, 0)\\\",\\n  linkColor: \\\"#4F5DFF\\\",\\n  cellHorizontalPadding: 8,\\n  cellVerticalPadding: 3,\\n  headerFontStyle: \\\"600 13px\\\",\\n  baseFontStyle: \\\"13px\\\",\\n  editorFontSize: \\\"13px\\\",\\n  lineHeight: 1.4,\\n  fontFamily: \\\"Inter, Roboto, -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Ubuntu, noto, arial, sans-serif\\\"\\n};\\nconst cols = [{\\n  title: \\\"A\\\",\\n  width: 200,\\n  group: \\\"Group 1\\\"\\n}, {\\n  title: \\\"B\\\",\\n  width: 200,\\n  group: \\\"Group 1\\\"\\n}, {\\n  title: \\\"C\\\",\\n  width: 200,\\n  group: \\\"Group 2\\\"\\n}, {\\n  title: \\\"D\\\",\\n  width: 200,\\n  group: \\\"Group 2\\\"\\n}, {\\n  title: \\\"E\\\",\\n  width: 200,\\n  group: \\\"Group 2\\\"\\n}];\\nexport const UseDataSource = () => {\\n  const cache = React.useRef({});\\n  const rows = 100000;\\n  const moveArgs = useMoveableColumns({\\n    columns: cols,\\n    getCellContent: React.useCallback(_ref => {\\n      let [col, row] = _ref;\\n      if (col === 0) {\\n        return {\\n          kind: GridCellKind.Text,\\n          allowOverlay: true,\\n          data: `${row}`,\\n          displayData: `${row}`\\n        };\\n      }\\n      const key = `${col},${row}`;\\n      if (cache.current[key] === undefined) {\\n        cache.current[key] = faker.name.firstName() + \\\" \\\" + faker.name.lastName();\\n      }\\n      const d = cache.current[key];\\n      return {\\n        kind: GridCellKind.Text,\\n        allowOverlay: true,\\n        data: d,\\n        displayData: d\\n      };\\n    }, [])\\n  });\\n  const [sort, setSort] = React.useState();\\n  const sortArgs = useColumnSort({\\n    columns: moveArgs.columns,\\n    getCellContent: moveArgs.getCellContent,\\n    rows,\\n    sort: sort === undefined ? undefined : {\\n      column: moveArgs.columns[sort],\\n      direction: \\\"desc\\\",\\n      mode: \\\"smart\\\"\\n    }\\n  });\\n  const collapseArgs = useCollapsingGroups({\\n    columns: moveArgs.columns,\\n    theme: testTheme,\\n    freezeColumns: 0\\n  });\\n  const onHeaderClick = React.useCallback(index => {\\n    setSort(index);\\n  }, []);\\n  return _jsx(BeautifulWrapper, {\\n    title: \\\"Custom source extensions\\\",\\n    description: _jsx(Description, {\\n      children: \\\"Fixme.\\\"\\n    }),\\n    children: _jsx(DataEditor, {\\n      ...defaultProps,\\n      ...moveArgs,\\n      ...sortArgs,\\n      ...collapseArgs,\\n      rows: rows,\\n      onColumnMoved: moveArgs.onColumnMoved,\\n      onHeaderClicked: onHeaderClick\\n    })\\n  });\\n};\\nUseDataSource.displayName = \\\"UseDataSource\\\";\\n;\\nUseDataSource.parameters = {\\n  options: {\\n    showPanel: false\\n  }\\n};\\nexport const UndoRedo = () => {\\n  const {\\n    cols: columns,\\n    getCellContent,\\n    setCellValue\\n  } = useMockDataGenerator(6);\\n  const gridRef = React.useRef(null);\\n  const {\\n    gridSelection,\\n    onCellEdited,\\n    onGridSelectionChange,\\n    undo,\\n    canRedo,\\n    canUndo,\\n    redo\\n  } = useUndoRedo(gridRef, getCellContent, setCellValue);\\n  return _jsx(BeautifulWrapper, {\\n    title: \\\"Undo / Redo Support\\\",\\n    description: _jsxs(Description, {\\n      children: [\\\"A simple undo/redo implementation\\\", _jsxs(MoreInfo, {\\n        children: [\\\"Use keyboard shortcuts CMD+Z and CMD+SHIFT+Z / CTRL+Z and CTRL+Y. Or click these buttons:\\\", _jsx(\\\"button\\\", {\\n          onClick: undo,\\n          disabled: !canUndo,\\n          style: {\\n            opacity: canUndo ? 1 : 0.4\\n          },\\n          children: \\\"Undo\\\"\\n        }), _jsx(\\\"button\\\", {\\n          onClick: redo,\\n          disabled: !canRedo,\\n          style: {\\n            opacity: canRedo ? 1 : 0.4\\n          },\\n          children: \\\"Redo\\\"\\n        })]\\n      }), _jsx(MoreInfo, {\\n        children: \\\"It works by taking a snapshot of the content of a cell before it is edited and replaying any edits back.\\\"\\n      })]\\n    }),\\n    children: _jsx(DataEditor, {\\n      ...defaultProps,\\n      ref: gridRef,\\n      onCellEdited: onCellEdited,\\n      getCellContent: getCellContent,\\n      gridSelection: gridSelection !== null && gridSelection !== void 0 ? gridSelection : undefined,\\n      onGridSelectionChange: onGridSelectionChange,\\n      columns: columns,\\n      rows: 1000\\n    })\\n  });\\n};\\nUndoRedo.displayName = \\\"UndoRedo\\\";\\nUndoRedo.parameters = {\\n  options: {\\n    showPanel: false\\n  }\\n};\",\".ss4kmn3{box-sizing:border-box;}.ss4kmn3 *,.ss4kmn3 *::before,.ss4kmn3 *::after{box-sizing:inherit;}\\n.bkh67gx{background-color:#2790b9;background:linear-gradient(90deg,#2790b9,#2070a9);color:white;padding:32px 48px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;height:100vh;font-family:sans-serif;}.bkh67gx > h1{font-size:50px;font-weight:600;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 12px 0;}.bkh67gx .sizer{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;background-color:white;border-radius:12px;box-shadow: rgba(9,30,66,0.25) 0px 4px 8px -2px, rgba(9,30,66,0.08) 0px 0px 0px 1px;}.bkh67gx .sizer .sizer-clip{border-radius:12px;overflow:hidden;-webkit-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0);height:100%;}\\n.d1deot3s{font-size:18px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 20px 0;}\\n.m1ml0sw1{font-size:14px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin:0 0 20px 0;}.m1ml0sw1 button{background-color:#f4f4f4;color:#2b2b2b;padding:2px 6px;font-family:monospace;font-size:14px;border-radius:4px;box-shadow:0px 1px 2px #00000040;margin:0 0.1em;border:none;cursor:pointer;}\\n/*# sourceMappingURL=data:application/json;base64,*/\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!../../../../node_modules/@linaria/webpack5-loader/lib/outputCssLoader.js?cacheProvider=!./use-data-source.stories.tsx\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!../../../../node_modules/@linaria/webpack5-loader/lib/outputCssLoader.js?cacheProvider=!./use-data-source.stories.tsx\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":["React","orderBy","colToKey","c","_c$id","_c$group","id","group","title","looseCompareCol","a","b","getSortIndexByKey","needle","current","keys","index","indexOf","Number","MAX_SAFE_INTEGER","remapped","findIndex","key","n","ind","useMoveableColumns","p","columns","columnsIn","getCellContent","getCellContentIn","onColumnMoved","onColumnMovedIn","setKeys","useState","map","useMemo","onColumnMovedRef","useRef","useCallback","startIndex","endIndex","_onColumnMovedRef$cur","old","newCols","toMove","splice","call","useEffect","cv","x","cell","col","row","GridCellKind","range","cellToSortData","_c$data$toString","_c$data","_c$data$toString2","_c$data2","_c$data3","kind","data","toString","Boolean","Markdown","RowID","Text","Uri","Bubble","Image","join","Drilldown","text","Protected","Loading","Custom","copyData","tryParse","val","length","isNaN","compareSmart","localeCompare","compareRaw","useColumnSort","_sort$direction","sort","rows","sortCol","undefined","column","dir","direction","sortMap","vals","Array","i","result","mode","reverse","getOriginalIndex","_ref","useCollapsingGroups","props","collapsed","setCollapsed","gridSelectionInner","setGridSelectionsInner","onGroupHeaderClicked","onGroupHeaderClickedIn","onGridSelectionChange","onGridSelectionChangeIn","getGroupDetails","getGroupDetailsIn","gridSelection","gridSelectionIn","freezeColumns","theme","spans","lastGroup","isCollapsed","includes","push","start","width","themeOverride","bgCell","bgCellMedium","_columns$index$group","_columns$index","preventDefault","filter","s","_column$group","g","name","overrideTheme","bgHeader","bgHeaderHasFocus","useReducer","initialState","undoHistory","redoHistory","canUndo","canRedo","isApplyingUndo","isApplyingRedo","reducer","state","action","newState","type","operation","pop","batch","Error","useUndoRedo","gridRef","onCellEdited","dispatch","currentBatch","timeout","isApplyingUndoRef","isApplyingRedoRef","setGridSelection","gridSelectionRef","onGridSelectionChangedEdited","newVal","wrappedOnCellEdited","newValue","isApplyingUpdate","clearTimeout","previousValue","edits","selection","setTimeout","undo","redo","cells","previousState","edit","prevValue","updateCells","onKeyDown","e","metaKey","ctrlKey","shiftKey","window","addEventListener","removeEventListener","isArray","GridColumnIcon","isEditableGridCell","isTextEditableGridCell","faker","seed","isTruthy","lossyCopyData","source","target","sourceData","_sourceData$toString","_sourceData$toString2","_source$data$toString","_source$data","_sourceData$0$toStrin","assertNever","getGridColumn","columnWithMock","getContent","rest","getResizableColumns","amount","defaultColumns","icon","HeaderString","hasMenu","firstName","displayData","allowOverlay","readonly","lastName","HeaderImage","Math","round","random","email","internet","company","jobTitle","HeaderUri","url","slice","extraColumnsAmount","extraColumns","_","createTextColumnInfo","lorem","word","ContentCache","constructor","cachedContent","Map","get","colCache","set","value","rowCache","useMockDataGenerator","numCols","arguments","cache","colsMap","setColsMap","onColumnResize","newSize","prevColsMap","ci","newArray","cols","colsMapRef","getCellsForSelection","y","height","setCellValueRaw","_ref2","setCellValue","_ref3","copied","lastUpdated","performance","now","panic","message","_never"],"sourceRoot":""}